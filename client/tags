!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	1.1	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/connor/docs/github-repos/code/frazzledrip/client/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.2.0	/v6.2.0/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(BIN_DIR)	Makefile	/^$(OBJ_DIR)\/src $(OBJ_DIR)\/test $(BIN_DIR):$/;"	t
$(BIN_DIR)/client.exe	Makefile	/^$(BIN_DIR)\/client.exe: $(SRC_OBJS) $(MAIN_OBJ) | $(BIN_DIR)$/;"	t
$(BIN_DIR)/test.exe	Makefile	/^$(BIN_DIR)\/test.exe: $(SRC_OBJS) $(TEST_OBJS) | $(BIN_DIR)$/;"	t
$(OBJ_DIR)/src	Makefile	/^$(OBJ_DIR)\/src $(OBJ_DIR)\/test $(BIN_DIR):$/;"	t
$(OBJ_DIR)/src/%.o	Makefile	/^$(OBJ_DIR)\/src\/%.o: $(SRC_DIR)\/%.cpp | $(OBJ_DIR)\/src$/;"	t
$(OBJ_DIR)/test	Makefile	/^$(OBJ_DIR)\/src $(OBJ_DIR)\/test $(BIN_DIR):$/;"	t
$(OBJ_DIR)/test/%.o	Makefile	/^$(OBJ_DIR)\/test\/%.o: $(TEST_DIR)\/%.cpp | $(OBJ_DIR)\/test$/;"	t
B64Encoder	include/Encoder.h	/^class B64Encoder : public Encoder$/;"	c
BASE64	include/C2Profile.h	/^    BASE64,$/;"	e	enum:__anonb0ded0740203
BIN_DIR	Makefile	/^BIN_DIR := bin$/;"	m
BinarySerializer	include/Serializer.h	/^class BinarySerializer : public Serializer$/;"	c
C2Profile	include/C2Profile.h	/^class C2Profile$/;"	c
C2ProfileUniquePtr	include/C2Profile.h	/^typedef std::unique_ptr<C2Profile> C2ProfileUniquePtr;$/;"	t	typeref:typename:std::unique_ptr<C2Profile>
C2_PROFILE_H	include/C2Profile.h	/^#define C2_PROFILE_H$/;"	d
CLIENT_H	include/Client.h	/^#define CLIENT_H$/;"	d
CLIENT_TEST_H	test/ClientTest.h	/^#define CLIENT_TEST_H$/;"	d
COMMAND_RESULT	include/MessageCommands.h	/^	COMMAND_RESULT,     \/\/ Output from executed command$/;"	e	enum:CommandType
COMMAND_RESULT	include/MessageTypes.h	/^	COMMAND_RESULT,     \/\/ Output from executed command$/;"	e	enum:__anonbc3d4e480103
COMPONENT_FACTORY_H	include/ComponentFactory.h	/^#define COMPONENT_FACTORY_H$/;"	d
COMPRESSOR_H	include/Compressor.h	/^#define COMPRESSOR_H$/;"	d
CXX	Makefile	/^CXX := g++$/;"	m
Client	include/Client.h	/^class Client$/;"	c
Client	src/Client.cpp	/^Client::Client($/;"	f	class:Client
ClientTest	test/ClientTest.h	/^class ClientTest$/;"	c
CommandType	include/MessageCommands.h	/^enum CommandType$/;"	g
ComponentFactory	include/ComponentFactory.h	/^class ComponentFactory$/;"	c
Compressor	include/Compressor.h	/^class Compressor$/;"	c
CompressorUniquePtr	include/Compressor.h	/^typedef std::unique_ptr<Compressor> CompressorUniquePtr;$/;"	t	typeref:typename:std::unique_ptr<Compressor>
Core	TODO.md	/^### Core$/;"	S	chapter:TODO
DATA_EXFIL	include/MessageCommands.h	/^	DATA_EXFIL,         \/\/ Stolen data$/;"	e	enum:CommandType
DATA_EXFIL	include/MessageTypes.h	/^	DATA_EXFIL,         \/\/ Stolen data$/;"	e	enum:__anonbc3d4e480103
DEFAULT	include/MessageTypes.h	/^	DEFAULT, 			\/\/ default\/null\/none msg$/;"	e	enum:__anonbc3d4e480103
ENCODER_H	include/Encoder.h	/^#define ENCODER_H$/;"	d
ENCRYPTOR_H	include/Encryptor.h	/^#define ENCRYPTOR_H$/;"	d
ERROR_REPORT	include/MessageCommands.h	/^	ERROR_REPORT        \/\/ Error information$/;"	e	enum:CommandType
ERROR_REPORT	include/MessageTypes.h	/^	ERROR_REPORT        \/\/ Error information$/;"	e	enum:__anonbc3d4e480103
Encoder	include/Encoder.h	/^class Encoder$/;"	c
EncoderUniquePtr	include/Encoder.h	/^typedef std::unique_ptr<Encoder> EncoderUniquePtr;$/;"	t	typeref:typename:std::unique_ptr<Encoder>
Encryptor	include/Encryptor.h	/^class Encryptor$/;"	c
EncryptorUniquePtr	include/Encryptor.h	/^typedef std::unique_ptr<Encryptor> EncryptorUniquePtr;$/;"	t	typeref:typename:std::unique_ptr<Encryptor>
FILE_UPLOAD	include/MessageCommands.h	/^	FILE_UPLOAD,        \/\/ File transfer$/;"	e	enum:CommandType
FILE_UPLOAD	include/MessageTypes.h	/^	FILE_UPLOAD,        \/\/ File transfer$/;"	e	enum:__anonbc3d4e480103
Features (TODO)	TODO.md	/^### Features (TODO)$/;"	S	chapter:TODO
HANDSHAKE	include/MessageCommands.h	/^	HANDSHAKE,          \/\/ Initial connection$/;"	e	enum:CommandType
HANDSHAKE	include/MessageTypes.h	/^	HANDSHAKE,          \/\/ Initial connection$/;"	e	enum:__anonbc3d4e480103
HEARTBEAT	include/MessageCommands.h	/^	HEARTBEAT,          \/\/ Regular check-in$/;"	e	enum:CommandType
HEARTBEAT	include/MessageTypes.h	/^	HEARTBEAT,          \/\/ Regular check-in$/;"	e	enum:__anonbc3d4e480103
HTTP	include/C2Profile.h	/^	HTTP,$/;"	e	enum:__anonb0ded0740103
HTTPS	include/C2Profile.h	/^	HTTPS$/;"	e	enum:__anonb0ded0740103
HandshakeCommand	include/MessageCommands.h	/^struct HandshakeCommand \/\/ TODO: think of better name$/;"	s
InternalMessage	include/MessageTypes.h	/^	InternalMessage() :$/;"	f	struct:InternalMessage
InternalMessage	include/MessageTypes.h	/^typedef struct InternalMessage$/;"	s
InternalMessage	include/MessageTypes.h	/^} InternalMessage;$/;"	t	typeref:struct:InternalMessage
JSON	include/C2Profile.h	/^    JSON, \/\/ JSON??$/;"	e	enum:__anonb0ded0740203
MAIN_OBJ	Makefile	/^MAIN_OBJ := $(OBJ_DIR)\/src\/main.o$/;"	m
MESSAGE_CONSUMER_H	include/MessageConsumer.h	/^#define MESSAGE_CONSUMER_H$/;"	d
MESSAGE_HANDLER_H	include/MessageHandler.h	/^#define MESSAGE_HANDLER_H$/;"	d
MESSAGE_PUBLISHER_H	include/MessagePublisher.h	/^#define MESSAGE_PUBLISHER_H$/;"	d
MESSAGE_TYPES_H	include/MessageTypes.h	/^#define MESSAGE_TYPES_H$/;"	d
MessageConsumer	include/MessageConsumer.h	/^class MessageConsumer$/;"	c
MessageConsumer	src/MessageConsumer.cpp	/^MessageConsumer::MessageConsumer($/;"	f	class:MessageConsumer
MessageConsumerPtr	include/MessageConsumer.h	/^typedef std::unique_ptr<MessageConsumer> MessageConsumerPtr;$/;"	t	typeref:typename:std::unique_ptr<MessageConsumer>
MessageHandler	include/MessageHandler.h	/^class MessageHandler$/;"	c
MessageHandlerPtr	include/MessageHandler.h	/^typedef std::unique_ptr<MessageHandler> MessageHandlerPtr;$/;"	t	typeref:typename:std::unique_ptr<MessageHandler>
MessageHeader	include/MessageTypes.h	/^	MessageHeader() :$/;"	f	struct:MessageHeader
MessageHeader	include/MessageTypes.h	/^typedef struct MessageHeader$/;"	s
MessageHeader	include/MessageTypes.h	/^} MessageHeader;$/;"	t	typeref:struct:MessageHeader
MessagePublisher	include/MessagePublisher.h	/^class MessagePublisher$/;"	c
MessagePublisher	src/MessagePublisher.cpp	/^MessagePublisher::MessagePublisher($/;"	f	class:MessagePublisher
MessagePublisherPtr	include/MessagePublisher.h	/^typedef std::unique_ptr<MessagePublisher> MessagePublisherPtr;$/;"	t	typeref:typename:std::unique_ptr<MessagePublisher>
MessageType	include/MessageTypes.h	/^} MessageType;$/;"	t	typeref:enum:__anonbc3d4e480103
NONE	include/C2Profile.h	/^    NONE$/;"	e	enum:__anonb0ded0740203
OBJ_DIR	Makefile	/^OBJ_DIR := obj$/;"	m
RECON_H	include/Recon.h	/^#define RECON_H$/;"	d
References	TODO.md	/^### References$/;"	S	chapter:TODO
SERIALIZER_H	include/Serializer.h	/^#define SERIALIZER_H$/;"	d
SRC_DIR	Makefile	/^SRC_DIR := src$/;"	m
SRC_FILES	Makefile	/^SRC_FILES := $(filter-out $(SRC_DIR)\/main.cpp, $(wildcard $(SRC_DIR)\/*.cpp))$/;"	m
SRC_OBJS	Makefile	/^SRC_OBJS := $(SRC_FILES:$(SRC_DIR)\/%.cpp=$(OBJ_DIR)\/src\/%.o)$/;"	m
SYSTEM_INFO	include/MessageCommands.h	/^	SYSTEM_INFO,        \/\/ Victim system data$/;"	e	enum:CommandType
SYS_INFO	include/MessageTypes.h	/^	SYS_INFO,        \/\/ Victim system data$/;"	e	enum:__anonbc3d4e480103
SerializationType	include/C2Profile.h	/^} SerializationType;$/;"	t	typeref:enum:__anonb0ded0740203
Serializer	include/Serializer.h	/^class Serializer$/;"	c
SerializerUniquePtr	include/Serializer.h	/^typedef std::unique_ptr<Serializer> SerializerUniquePtr;$/;"	t	typeref:typename:std::unique_ptr<Serializer>
TCP	include/C2Profile.h	/^	TCP,$/;"	e	enum:__anonb0ded0740103
TCPTransporter	include/Transporter.h	/^class TCPTransporter : public Transporter$/;"	c
TEST_DIR	Makefile	/^TEST_DIR := test$/;"	m
TEST_FILES	Makefile	/^TEST_FILES := $(wildcard $(TEST_DIR)\/*.cpp)$/;"	m
TEST_H	test/test.h	/^#define TEST_H$/;"	d
TEST_OBJS	Makefile	/^TEST_OBJS := $(TEST_FILES:$(TEST_DIR)\/%.cpp=$(OBJ_DIR)\/test\/%.o)$/;"	m
TODO	TODO.md	/^# TODO$/;"	c
TODO (files/functions)	TODO.md	/^### TODO (files\/functions)$/;"	S	chapter:TODO
TRANSPORTER_H	include/Transporter.h	/^#define TRANSPORTER_H$/;"	d
TransportType	include/C2Profile.h	/^} TransportType;$/;"	t	typeref:enum:__anonb0ded0740103
Transporter	include/Transporter.h	/^class Transporter$/;"	c
TransporterUniquePtr	include/Transporter.h	/^typedef std::unique_ptr<Transporter> TransporterUniquePtr;$/;"	t	typeref:typename:std::unique_ptr<Transporter>
XorEncryptor	include/Encryptor.h	/^	XorEncryptor(std::vector<uint8_t> key) : key_(key) {}$/;"	f	class:XorEncryptor
XorEncryptor	include/Encryptor.h	/^class XorEncryptor : public Encryptor$/;"	c
__anon6d3181940108	include/Encryptor.h	/^typedef struct {$/;"	s
__anonb0ded0740103	include/C2Profile.h	/^{$/;"	g
__anonb0ded0740203	include/C2Profile.h	/^{$/;"	g
__anonbc3d4e480103	include/MessageTypes.h	/^{$/;"	g
all	Makefile	/^all: client test$/;"	t
b64_table	src/Encoder.cpp	/^const char b64_table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/"; \//;"	v	typeref:typename:const char[]
beacon_interval	include/C2Profile.h	/^    uint32_t beacon_interval;   \/\/ Check-in interval (ms)$/;"	m	class:C2Profile	typeref:typename:uint32_t
campaign_id	include/C2Profile.h	/^    char campaign_id[64];       \/\/ Campaign identifier$/;"	m	class:C2Profile	typeref:typename:char[64]
ciphertext	include/Encryptor.h	/^	unsigned char ciphertext[1024];$/;"	m	struct:__anon6d3181940108	typeref:typename:unsigned char[1024]
ciphertext_len	include/Encryptor.h	/^	int ciphertext_len;$/;"	m	struct:__anon6d3181940108	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
client	Makefile	/^client: $(BIN_DIR)\/client.exe$/;"	t
command_key	include/C2Profile.h	/^    uint8_t command_key[32];    \/\/ Key for command data encryption$/;"	m	class:C2Profile	typeref:typename:uint8_t[32]
compressData	include/C2Profile.h	/^    bool compressData;$/;"	m	class:C2Profile	typeref:typename:bool
config_	include/Client.h	/^    C2Profile& config_; \/\/ TODO: eventually have $/;"	m	class:Client	typeref:typename:C2Profile &
crypto_key	include/C2Profile.h	/^    uint8_t crypto_key[32] =     \/\/ AES-256 key for encryption$/;"	m	class:C2Profile	typeref:typename:uint8_t[32]
data	include/MessageTypes.h	/^	std::vector<uint8_t> data; \/\/ TODO: shouldn't be fixed size?$/;"	m	struct:InternalMessage	typeref:typename:std::vector<uint8_t>
dataSize	include/MessageTypes.h	/^	uint32_t dataSize;     \/\/ Size of following data \/\/ size of payload?$/;"	m	struct:MessageHeader	typeref:typename:uint32_t
decode	src/Encoder.cpp	/^int B64Encoder::decode(const char *in, uint8_t *out) {$/;"	f	class:B64Encoder	typeref:typename:int
decrypt	src/Encryptor.cpp	/^bool XorEncryptor::decrypt(const std::vector<uint8_t>& cipher, std::vector<uint8_t>& data)$/;"	f	class:XorEncryptor	typeref:typename:bool
deserialize	include/Serializer.h	/^	bool deserialize() { return true; };$/;"	f	class:Serializer	typeref:typename:bool
enable_persistence	include/C2Profile.h	/^    int enable_persistence;    \/\/ Install persistence$/;"	m	class:C2Profile	typeref:typename:int
encode	src/Encoder.cpp	/^char* B64Encoder::encode(const unsigned char* data, size_t input_len)$/;"	f	class:B64Encoder	typeref:typename:char *
encoder_	include/Client.h	/^    Encoder& encoder_;$/;"	m	class:Client	typeref:typename:Encoder &
encoder_	include/MessageConsumer.h	/^	Encoder& encoder_;$/;"	m	class:MessageConsumer	typeref:typename:Encoder &
encoder_	include/MessagePublisher.h	/^	Encoder& encoder_;$/;"	m	class:MessagePublisher	typeref:typename:Encoder &
encrypt	src/Encryptor.cpp	/^bool XorEncryptor::encrypt(const std::vector<uint8_t>& data, std::vector<uint8_t>& cipher)$/;"	f	class:XorEncryptor	typeref:typename:bool
encrypted_message	include/Encryptor.h	/^} encrypted_message;$/;"	t	typeref:struct:__anon6d3181940108
encryptor_	include/Client.h	/^    Encryptor& encryptor_;$/;"	m	class:Client	typeref:typename:Encryptor &
encryptor_	include/MessageConsumer.h	/^	Encryptor& encryptor_;$/;"	m	class:MessageConsumer	typeref:typename:Encryptor &
encryptor_	include/MessagePublisher.h	/^	Encryptor& encryptor_;$/;"	m	class:MessagePublisher	typeref:typename:Encryptor &
handleTCP	src/MessageHandler.cpp	/^bool MessageHandler::handleTCP(uint8_t* rawData, size_t rawDataLength, InternalMessage* resultMs/;"	f	class:MessageHandler	typeref:typename:bool
header	include/MessageTypes.h	/^	MessageHeader header; \/\/ the header... always use custom header? no need for tlv... MessageTy/;"	m	struct:InternalMessage	typeref:typename:MessageHeader
host_	include/Transporter.h	/^	const char* host_;$/;"	m	class:Transporter	typeref:typename:const char *
internalMessageData	test/test.h	/^inline std::vector<uint8_t> internalMessageData = $/;"	v	typeref:typename:std::vector<uint8_t>
jitter	include/C2Profile.h	/^    uint32_t jitter;           \/\/ Random delay to avoid patterns$/;"	m	class:C2Profile	typeref:typename:uint32_t
key_	include/Encryptor.h	/^	const std::vector<uint8_t> key_; \/\/ change to reference?$/;"	m	class:XorEncryptor	typeref:typename:const std::vector<uint8_t>
loadConfig	src/C2Profile.cpp	/^bool C2Profile::loadConfig()$/;"	f	class:C2Profile	typeref:typename:bool
main	src/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	test/test.cpp	/^int main()$/;"	f	typeref:typename:int
max_payload_size	include/C2Profile.h	/^    uint32_t max_payload_size;  \/\/ Maximum data exfil size$/;"	m	class:C2Profile	typeref:typename:uint32_t
messageId	include/MessageTypes.h	/^	uint32_t messageId;    \/\/ Unique ID for tracking$/;"	m	struct:MessageHeader	typeref:typename:uint32_t
messageType	include/MessageTypes.h	/^	MessageType messageType;$/;"	m	struct:MessageHeader	typeref:typename:MessageType
mimic_process	include/C2Profile.h	/^    int mimic_process;         \/\/ Spoof process name$/;"	m	class:C2Profile	typeref:typename:int
persistence_method	include/C2Profile.h	/^    char persistence_method[32]; \/\/ Registry, service, scheduled task$/;"	m	class:C2Profile	typeref:typename:char[32]
port_	include/Transporter.h	/^	const char* port_;$/;"	m	class:Transporter	typeref:typename:const char *
processMessage	src/MessageHandler.cpp	/^bool MessageHandler::processMessage(InternalMessage* msg) \/\/ NOTE: passing the config around i/;"	f	class:MessageHandler	typeref:typename:bool
process_name	include/C2Profile.h	/^    char process_name[64];      \/\/ Process to mimic$/;"	m	class:C2Profile	typeref:typename:char[64]
receiveMessages	src/MessageHandler.cpp	/^bool MessageHandler::receiveMessages(uint8_t* buffer, size_t bytes_received)$/;"	f	class:MessageHandler	typeref:typename:bool
recvMessage	src/MessageConsumer.cpp	/^bool MessageConsumer::recvMessage(std::vector<uint8_t> msg)$/;"	f	class:MessageConsumer	typeref:typename:bool
retry_count	include/C2Profile.h	/^    uint32_t retry_count;       \/\/ Connection retries$/;"	m	class:C2Profile	typeref:typename:uint32_t
retry_delay	include/C2Profile.h	/^    uint32_t retry_delay;       \/\/ Delay between retries$/;"	m	class:C2Profile	typeref:typename:uint32_t
run	src/Client.cpp	/^bool Client::run(const char* host, const char* port)$/;"	f	class:Client	typeref:typename:bool
serializationType	include/C2Profile.h	/^    SerializationType serializationType;$/;"	m	class:C2Profile	typeref:typename:SerializationType
serialize	include/Serializer.h	/^	bool serialize() { return true; };$/;"	f	class:Serializer	typeref:typename:bool
serialize	src/Serializer.cpp	/^bool BinarySerializer::serialize(const InternalMessage& msg, std::vector<uint8_t>& outMsg)$/;"	f	class:BinarySerializer	typeref:typename:bool
serializer_	include/Client.h	/^    Serializer& serializer_;$/;"	m	class:Client	typeref:typename:Serializer &
serializer_	include/MessageConsumer.h	/^	Serializer& serializer_;$/;"	m	class:MessageConsumer	typeref:typename:Serializer &
serializer_	include/MessagePublisher.h	/^	Serializer& serializer_;$/;"	m	class:MessagePublisher	typeref:typename:Serializer &
server_host	include/C2Profile.h	/^    char server_host[256];      \/\/ C2 server IP\/domain$/;"	m	class:C2Profile	typeref:typename:char[256]
server_port	include/C2Profile.h	/^    uint16_t server_port;       \/\/ C2 server port$/;"	m	class:C2Profile	typeref:typename:uint16_t
tag	include/Encryptor.h	/^	unsigned char tag[16];  \/\/ Authentication tag$/;"	m	struct:__anon6d3181940108	typeref:typename:unsigned char[16]
test	Makefile	/^test: $(BIN_DIR)\/test.exe$/;"	t
testAll	test/ClientTest.cpp	/^bool ClientTest::testAll()$/;"	f	class:ClientTest	typeref:typename:bool
testSerializer	test/ClientTest.cpp	/^bool ClientTest::testSerializer(InternalMessage& msg, BinarySerializer& serializer)$/;"	f	class:ClientTest	typeref:typename:bool
timeout_ms	include/C2Profile.h	/^    uint32_t timeout_ms;        \/\/ Network timeout$/;"	m	class:C2Profile	typeref:typename:uint32_t
transport	include/C2Profile.h	/^    TransportType transport;    \/\/ TCP, HTTP, HTTPS, DNS, etc.$/;"	m	class:C2Profile	typeref:typename:TransportType
use_antidebug	include/C2Profile.h	/^    int use_antidebug;         \/\/ Enable anti-debug techniques$/;"	m	class:C2Profile	typeref:typename:int
use_obfuscation	include/C2Profile.h	/^    int use_obfuscation;       \/\/ Enable code obfuscation$/;"	m	class:C2Profile	typeref:typename:int
use_tls	include/C2Profile.h	/^    int use_tls;              \/\/ Use TLS encryption$/;"	m	class:C2Profile	typeref:typename:int
user_agent	include/C2Profile.h	/^    char user_agent[256];       \/\/ For HTTP camouflage$/;"	m	class:C2Profile	typeref:typename:char[256]
verify_cert	include/C2Profile.h	/^    int verify_cert;          \/\/ Verify server certificate$/;"	m	class:C2Profile	typeref:typename:int
